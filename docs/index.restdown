---
title: CNAPI (Compute Node API) Design
apisections: Allocation, Boot Parameters, Ping, Platforms, Servers, Provisioner Tasks, Remote Execution, Virtual Machines, Virtual Machine Snapshots, Images, Waitlist, ZFS
markdown2extras: wiki-tables, code-friendly
---

version: 1.0.7
date: Wed Feb 26 2014 02:12:45 GMT+1100 (EST)

# Who

Orlando
Josh

# Overview

CNAPI is the 'Compute Node API' which presents an API to communicate and
interact with Compute Nodes (CNs).

# Responsibilities

CNAPI provides a unified interface to common Compute Node operations, such as
server setup, factory-resetting, virtual machine life-cycle actions (creation,
state transitions, destruction, etc.) In general, if it needs to talk to
compute nodes, it should happen through CNAPI.

# Compute Node Startup

When a compute node is started up from a shutdown state, regardless if it has
been set up, it will broadcast a message containing the payload from the
sysinfo utility. This broadcast message is picked up by CNAPI.


# Interacting with CNAPI

There are two ways of interacting with CNAPI. Indirectly: adminui, cloudapi,
workflow, vmapi. Directly: sdc-cnapi/curl.


The `sdc-cnapi` tool is a wrapper around curl with will fill in the host, port
and auth details. It is present in the `sdc` zone on the headnode, but
available to be run from the GZ.

Use it as so:

    sdc-cnapi /servers/5e4bafa8-9dfd-11e3-982d-a7dee2e79ac4 -X POST -d '{ "datacenter_name": "foo" }'


# Heartbeats

Compute nodes are populated with services, some of which connect to AMQP. One
of these is the "heartbeater" agent, its responsibility is to periodically emit
server and zone information to AMQP. CNAPI is connects to AMQP and listens for
these heartbeat messages from all servers. It uses the periodic action of these
heartbeats to determine whether a compute node is up.

If a compute node is not setup (and therefore has no agents besides ur), CNAPI
uses the frequency of the sysinfo messages sent by Ur.


# Resetting to factory defaults

To reset a compute node to its factory default state, `PUT` to the server's
`factory-reset` endpoint:

    -bash-4.1# sdc-cnapi /servers/564d5f0d-3517-5f60-78f1-ce6d0b8f58df/factory-reset -X PUT
    HTTP/1.1 202 Accepted
    Content-Type: application/json
    Content-Length: 51
    Date: Tue, 25 Feb 2014 09:24:52 GMT
    Server: Compute Node API
    x-request-id: ae6426e0-9dfe-11e3-96ca-d3493bcec4fe
    x-response-time: 28
    x-server-name: a6b7ba97-deb7-44b1-85da-3d7ae328c710
    Connection: keep-alive

    {
      "job_uuid": "4a664491-aa29-4d77-9fc2-592308d56922"
    }

The UUID of the factory reset job is returned and can be used to poll for the
completion of the operation.


# Provisioner Tasks

# Virtual Machine Actions

# Ur Messages

# Boot parameters

When a compute node boots up, its boot-loader fetches the necessary information
from booter. These booter in turn requests this data, consisting of
`boot_platform`, `kernel_flags` and `kernel_modules` from CNAPI.

Operations on boot parameters are done via the `/boot` endpoint.

On the the initial, boot from a "factory default" state, the "default" boot
parameters will be fetched from the `/boot/default` endpoint.

Setting the default boot platform for new compute nodes:

    sdc-cnapi /boot/ac586cae-9ace-11e3-a64e-7f4008875a90 \
        -X PUT \
        -d '{ "boot_platform": "20140219T205617Z" }'


Kernel arguments are key/value pairs passed in to the kernel. They are distinct
from kernel flags.

For example, to set the kernel arguments and flags for a compute node with uuid
21306a50-9dad-11e3-9404-53f0c3de6cb8:

    sdc-cnapi /boot/21306a50-9dad-11e3-9404-53f0c3de6cb8 \
        -X POST
        -d '{ "kernel_args": { "foo": "bar" }, "kernel_flags": { "-k": true } }'


Passing `null` as the value to a key deletes that key/value.

For instance, to delete the `foo` key:

    sdc-cnapi /boot/21306a50-9dad-11e3-9404-53f0c3de6cb8 \
        -X POST
        -d '{ "kernel_args": { "foo": null } }'


To completely overwrite values, use PUT instead of POST:

    sdc-cnapi /boot/21306a50-9dad-11e3-9404-53f0c3de6cb8 \
        -X PUT
        -d '{ "kernel_args": { "alpha": "able" } }'


# Setting up a new Server

Setting when a new server comes online its `status` should be be visible as
'running', and its `setup` state should be `'unsetup'`:

    -bash-4.1# sdc-cnapi /servers | json -Hga uuid setup status
    564d2cec-76f9-2438-7f66-9140267bed05 true running
    564d5f0d-3517-5f60-78f1-ce6d0b8f58df false running


To set up the new server, one may use one of the indirect methods (adminui,
etc).

Addiontionally one may also use `sdc-server`:

    -bash-4.1# sdc-server setup 564d5f0d-3517-5f60-78f1-ce6d0b8f58df


Or, sdc-cnapi:

    -bash-4.1# sdc-cnapi /servers/564d5f0d-3517-5f60-78f1-ce6d0b8f58df/setup -X PUT


# Reference

# Allocation

## SelectServer (POST /allocate)

Given the provided constraints, returns a server chosen to allocate a new VM,
as well as the steps taken to reach that decision. This does not cause the VM
to actually be created (see VmCreate for that), but rather returns the UUID
of an eligible server.

See DAPI docs for more details on how the vm, package, image and nic_tags
parameters must be constructed.


### Inputs

||**Param**||**Type**||**Description**||
||vm||Object||Various required metadata for VM construction||
||package||Object||Description of dimensions used to construct VM||
||image||Object||Description of image used to construct VM||
||nic_tags||Array||Names of nic tags which servers must have||
||servers||Array||Optionally limit which servers to consider by providing their UUIDs||


### Responses

||*Code*||*Type*||*Description*||
||200||Object||Server selected and steps taken||
||409||Object||No server found, and steps and reasons why not||
||500||Error||Could not process request||


# Boot Parameters

## BootParamsGetDefault (GET /boot/default)

Returns the default boot parameters.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||200||Object||Default boot parameters and kernel_args||
||404||None||No such Server||

## BootParamsSetDefault (PUT /boot/default)

Set the default boot parameters.

Completely override the existing boot parameter values with the given
payload. Any values not present in the payload will effectively be deleted.


### Inputs

||**Param**||**Type**||**Description**||
||platform||String||The platform image to use on next boot||
||kernel_args||Object||Key value pairs to be sent to server on boot||
||boot_modules||Array||List of boot module objects||
||kernel_flags||Object||Kernel flags to be sent to server on boot||


### Responses

||*Code*||*Type*||*Description*||
||204||None||Boot parameters successfully set.||
||404||None||No such Server||

## BootParamsUpdateDefault (POST /boot/default)

Modify the default boot parameters.

If a value is present in the default boot parameters, but no new value is
passed in, the currently effective value will remain unchanged.


### Inputs

||**Param**||**Type**||**Description**||
||kernel_args||Object||Boot parms to update||
||boot_modules||Array||List of boot module objects||
||kernel_flags||Object||Kernel flags to update||
||platform||String||Set platform as the bootable platform||


### Responses

||*Code*||*Type*||*Description*||
||204||None||Boot parameters successfully set||
||404||None||No such Server||

## BootParamsGet (GET /boot/:server_uuid)

Returns the boot parameters for a particular server.

Returns the platform to be booted on the next reboot in addition to what
kernel parameters will be used to boot the server.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||200||Object||Default boot parameters and kernel_args||
||404||None||No such Server||

## BootParamsSet (POST /boot/:server_uuid)

Set the boot parameters of a server.

Completely overrides the platform and boot parameters of a server. If a
value is not set in the new object but is in the old one, it will be
effectively deleted when the new object replaces the old.


### Inputs

||**Param**||**Type**||**Description**||
||kernel_args||Object||Boot parms to update||
||boot_modules||Array||List of boot module objects||
||kernel_values||Object||Kernel flags to update||
||platform||String||Set platform as the bootable platform||


### Responses

||*Code*||*Type*||*Description*||
||202||None||No content||
||404||None||No such Server||

## BootParamsUpdate (POST /boot/:server_uuid)

Update only the given boot configuration values.

Does not overwrite any values which are not given.


### Inputs

||**Param**||**Type**||**Description**||
||kernel_args||Object||Boot parms to update||
||kernel_flags||Object||Hash containing flag key/value pairs||
||boot_modules||Array||List of boot module objects||
||platform||String||Set platform as the bootable platform||


### Responses

||*Code*||*Type*||*Description*||
||202||None||No content||


# Ping

## Ping (GET /ping)

Return CNAPI's service status details.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||200||Object||Status details.||


# Platforms

## PlatformList (GET /platforms)

Returns avaiable platform images in datacenter.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||200||Array||The returned servers||


# Servers

## ServerList (GET /servers)

Returns Servers present in datacenter.


### Inputs

||**Param**||**Type**||**Description**||
||uuids||String||Comma seperated list of UUIDs to look up||
||setup||Boolean||Return only setup servers||
||headnode||Boolean||Return only headnodes||
||reserved||Boolean||Return only reserved servers||
||reservoir||Boolean||Return only reservoir servers||
||hostname||String||Return machine with given hostname||
||extras||String||Comma seperated values: vms, memory, sysinfo||
||limit||Number||Maximum number of results to show||
||offset||Number||Offset the subset of results returned||


### Responses

||*Code*||*Type*||*Description*||
||200||Array||The returned servers||

## ServerGet (GET /servers/:server\_uuid)

Look up a single Server by UUID.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||200||Object||The server object&gt;||

## ServerUpdate (POST /servers/:server_uuid)

Set the value of a Server's attribute.


### Inputs

||**Param**||**Type**||**Description**||
||boot_platform||String||The platform image to be used on next boot||
||default_console||String||Console type||
||rack_identifier||String||The id of the server's rack||
||comments||String||Any comments about the server||
||reserved||Boolean||Server is available for provisioning||
||reservoir||Boolean||Server should be considered last for provisioning||
||reservation_ratio||Number||The reservation ratio||
||overprovision_ratios||Object||The overprovisioning ratios. Must be an object with Number value keys and keys must be one of 'cpu', 'ram', 'disk', 'io', 'net'.||
||serial||String||Serial device||
||setup||Boolean||True if server has been set up||
||setting_up||Boolean||True if server is in the process of setting up||
||transitional_status||String||The fallback status if not 'running'. For example, if the server has to reboot, this value may be set to 'rebooting'.||
||traits||Object||Server traits||


### Responses

||*Code*||*Type*||*Description*||
||204||None||The value was set successfuly||

## ServerReboot (POST /servers/:server\_uuid/reboot)

Reboot the server.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||Object||Server reboot initiated||
||500||None||Error attempting to set up server||

## ServerFactoryReset (PUT /servers/:server\_uuid/factory-reset)

Reset the server back to a factory state.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||Object||Setup initated, returns object containing workflow id||
||500||None||Error attempting to set up server||

## ServerSetup (PUT /servers/:server_uuid/setup)

Initiate the server setup process for a newly started server.


### Inputs

||**Param**||**Type**||**Description**||
||nics||Object||Nic parameters to update||
||postsetup_script||String||Script to run after setup has completed||
||hostname||String||Hostname to set for the specified server||


### Responses

||*Code*||*Type*||*Description*||
||200||Object||Setup initated, returns object containing workflow id||
||500||None||Error while processing request||

## ServerSysinfoRefresh (POST /servers/:server_uuid/sysinfo-refresh)

Fetch a given server's sysinfo values and store them in the server object.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||200||Object||Sysinfo refresh initiated||
||500||None||Error while processing request||

## ServerDelete (DELETE /servers/:server_uuid)

Remove all references to given server. Does not change anything on the
actual server.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||None||Server was deleted successfully||
||500||Error||Could not process request||

## ServerTaskHistory (GET /servers/:server_uuid/task-history)

Return details of all provisioner tasks run on the compute node since
provisioner was started.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||None||Tasks returned successfully||
||500||Error||Could not process request||

## ServerAttach (GET /servers/:server_uuid/attach)

This endpoint allows servers to register themselves with CNAPI via a
persistent websocket connection from the compute node's provisioner. If this
connection exists the server is assumed to be up and running. This allows
for the server status to be tracked with a much lower time between the
server going up or down and the time until that status is reflected in the
server status returned by CNAPI/


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||None||Tasks returned successfully||
||500||Error||Could not process request||


# Provisioner Tasks

## TaskGet (GET /tasks/:task_id)

Returns the details of the given task.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||200||Object||Task details||
||404||None||No such task found||


# Remote Execution

## CommandExecute (POST /servers/:server_uuid/execute)

Synchronously execute a command on the target server.


### Inputs

||**Param**||**Type**||**Description**||
||args||Array||Array containing arguments to be passed in to command||
||env||Object||Object containing environment variables to be passed in||
||script||String||Script to be executed. Must have a shebang line||


### Responses

||*Code*||*Type*||*Description*||
||404||None||No such server||


# Virtual Machines

## VmList (GET /servers/:server_uuid/vms)

Query the server for a list of VMs.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||Array||List of VMs||
||404||Object||No such server||

## VmLoad (GET /servers/:server_uuid/vms/:uuid)

Query the server for the VM's details.


### Inputs

||**Param**||**Type**||**Description**||
||jobid||String||Post information to workflow with this id||


### Responses

||*Code*||*Type*||*Description*||
||204||Object||Task was sent to server||
||404||Object||No such VM||
||404||Object||No such server||

## VmInfo (GET /servers/:server_uuid/vms/:uuid/info)

Query the server for the VM's `vmadm info` output.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||200||Object||Request succeeded||
||404||Object||No such VM||
||404||Object||No such server||

## VmInfo (GET /servers/:server_uuid/vms/:uuid/vnc)

Query the server for the VM's VNC host and port.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||200||Object||Request succeeded||
||404||Object||No such VM||
||404||Object||No such server||

## VmUpdate (POST /servers/:server\_uuid/vms/:uuid/update)

Modify the system parameters of the VM identified by `:uuid` on server with
UUID `:server_uuid`.


### Inputs

||**Param**||**Type**||**Description**||
||jobid||String||Post information to workflow with this id||


### Responses

||*Code*||*Type*||*Description*||
||204||None||Task was sent to server||
||404||Error||No such VM||
||404||Error||No such server||

## VmNicsUpdate (POST /servers/:server\_uuid/vms/nics/update)

Bulk modify VM nics


### Inputs

||**Param**||**Type**||**Description**||
||jobid||String||Post information to workflow with this id||


### Responses

||*Code*||*Type*||*Description*||
||204||None||Task was sent to server||
||400||Error||Task not supported on server||
||404||Error||No such server||

## VmStart (POST /servers/:server_uuid/vms/:uuid/start)

Boot up a vm which is in the 'stopped' state.


### Inputs

||**Param**||**Type**||**Description**||
||jobid||String||Post information to workflow with this id||


### Responses

||*Code*||*Type*||*Description*||
||204||None||Task was sent to server||
||404||Error||No such VM||
||404||Error||No such server||

## VmStop (POST /servers/:server\_uuid/vms/:uuid/stop)

Shut down a VM which is in the 'running' state.


### Inputs

||**Param**||**Type**||**Description**||
||jobid||String||Post information to workflow with this id||


### Responses

||*Code*||*Type*||*Description*||
||204||None||Task was sent to server||
||404||Error||No such VM||
||404||Error||No such server||
||500||Error||Error encountered while attempting to fulfill request||

## VmReboot (POST /servers/:server\_uuid/vms/:uuid/reboot)

Reboot a VM which is in the 'running' state.


### Inputs

||**Param**||**Type**||**Description**||
||jobid||String||Post information to workflow with this id||


### Responses

||*Code*||*Type*||*Description*||
||204||None||Task was sent to server||
||404||Error||No such VM||
||404||Error||No such server||
||500||Error||Error encountered while attempting to fulfill request||

## VmCreate (POST /servers/:server_uuid/vms)

Create a VM on the specified server.


### Inputs

||**Param**||**Type**||**Description**||
||jobid||String||Create a new virtual machine on the given server||


### Responses

||*Code*||*Type*||*Description*||
||204||None||Task was sent to server||
||404||Error||No such server||
||500||Error||Error encountered while attempting to fulfill request||

## VmReprovision (POST /servers/:server_uuid/vms/:uuid/reprovision)

Reprovision a given VM.


### Inputs

||**Param**||**Type**||**Description**||
||jobid||String||Create a new virtual machine on the given server||
||image_uuid||String||Reprovision using the new image_uuid||


### Responses

||*Code*||*Type*||*Description*||
||204||None||Task was sent to server||
||404||Error||No such server||
||500||Error||Error encountered while attempting to fulfill request||

## VmDestroy (DELETE /servers/:server_uuid/vms/:uuid)

Delete the specified VM.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||None||Task was sent to server||
||404||Error||No such server||
||500||Error||Error encountered while attempting to fulfill request||


# Virtual Machine Snapshots

## VmSnapshotCreate (PUT /servers/:server_uuid/vms/:uuid/snapshots)

Task a snapshot of a VM.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||None||Task was sent to server||
||404||Error||No such server||
||500||Error||Error encountered while attempting to fulfill request||

## VmSnapshotRollback (PUT /servers/:server_uuid/vms/:uuid/snapshots/:snapshot_name/rollback)

Roll back to a previous snapshot of a VM.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||None||Task was sent to server||
||404||Error||No such server||
||500||Error||Error encountered while attempting to fulfill request||

## VmSnapshotDestroy (DELETE /servers/:server_uuid/vms/:uuid/snapshots/:snapshot_name)

Delete a VM's snapshot.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||None||Task was sent to server||
||404||Error||No such server||
||500||Error||Error encountered while attempting to fulfill request||


# Images

## VmImagesCreate (POST /servers/:server_uuid/vms/:uuid/images)

Create a VM image.


### Inputs

||**Param**||**Type**||**Description**||
||jobid||String||Create a new virtual machine on the given server||
||compression||String||Compression to use for creating image||
||imgapi_url||String||Location of imgapi||
||incremental||Boolean||Make this an incremental image? Optional.||
||prepare_image_script||String||A script run in a reboot of the VM||
||manifest||Object||Image manifest object. Require at least &quot;uuid&quot;,||


### Responses

||*Code*||*Type*||*Description*||
||204||None||Task was sent to server||
||404||Error||No such server||
||500||Error||Error encountered while attempting to fulfill request||


# Waitlist

## ServerWaitlistList (GET /servers/:server_uuid/tickets)

Returns all waitlist tickets currently active on a server.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||200||Array||Waitlist returned successfully||
||500||Error||Could not process request||

## ServerWaitlistTicketCreate (POST /servers/:server_uuid/tickets)

Create a new waitlist ticket.


### Inputs

||**Param**||**Type**||**Description**||
||scope||String||Limit the ticket to the given scope||
||id||String||The id of the resource of type 'scope'||
||expires_at||String||ISO 8601 date string when ticket will expire||
||action||String||Description of acting to be undertaken||


### Responses

||*Code*||*Type*||*Description*||
||202||Array||Waitlist ticket created successfully||
||500||Error||Could not process request||

## ServerWaitlistGetTicket (POST /tickets/:ticket_uuid)

Retrieve a waitlist ticket.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||200||Array||Waitlist ticket returned successfully||
||500||Error||Could not process request||

## ServerWaitlistDeleteTicket (DELETE /tickets/:ticket_uuid)

Delete a waitlist ticket.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||Array||Waitlist ticket deleted successfully||
||500||Error||Could not process request||

## ServerWaitlistTicketsDeleteAll (DELETE /servers/:server_uuid/tickets)

Delete all of a server's waitlist tickets.


### Inputs

||**Param**||**Type**||**Description**||
||force||Boolean||Must be set to 'true' for delete to succeed||


### Responses

||*Code*||*Type*||*Description*||
||204||Array||Waitlist ticket deleted successfully||
||500||Error||Could not process request||

## ServerWaitlistTicketsWait (GET /tickets/:ticket_uuid/wait)

Wait until a waitlist ticket either expires or becomes active.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||Array||Ticket active or expired||
||500||Error||Could not process request||

## ServerWaitlistTicketsWait (GET /tickets/:ticket_uuid/release)

Release a currently active or queued waitlist ticket.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||Array||Ticket released successfully||
||500||Error||Could not process request||


# ZFS

## DatasetsList (GET GET /servers/:server_uuid/datasets)

List ZFS datasets on a server.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||200||Array||Array of objects, one per dataset on server||

## DatasetCreate (POST /servers/:server_uuid/datasets)

Create a ZFS dataset on a server.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||None||Dataset successfully created||

## SnapshotCreate (POST /servers/:server_uuid/datasets/:dataset/snapshot)

Create a ZFS snapshot of a dataset on a server.


### Inputs

||**Param**||**Type**||**Description**||
||name||String||The name of the snapshot to create||


### Responses

||*Code*||*Type*||*Description*||
||204||None||Snapshot successfully created||

## SnapshotRollback (POST /servers/:server_uuid/datasets/:dataset/rollback)

Revert a ZFS dataset to back to a previous state captured by a snapshot.


### Inputs

||**Param**||**Type**||**Description**||
||name||String||The name of the snapshot to be created||


### Responses

||*Code*||*Type*||*Description*||
||204||None||Snapshot successfully rolled back||

## SnapshotList (GET /servers/:server_uuid/datasets/:dataset/snapshots)

List all snapshots on a dataset


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||200||Array||Array of snapshot objects||

## DatasetPropertiesGetAll (GET /servers/:server_uuid/dataset-properties)

Get ZFS properties across all datasets on a server.


### Inputs

||**Param**||**Type**||**Description**||
||&lt;prop1&gt;||String||Get the property given by the &quot;prop1&quot; value||
||&lt;prop2&gt;||String||Get the property given by the &quot;prop2&quot; value||
||&lt;propN&gt;||String||Get the property given by the &quot;propN&quot; value||


### Responses

||*Code*||*Type*||*Description*||
||200||Object||list of property details||

## DatasetPropertiesGet (GET /servers/:server_uuid/datasets/:dataset/properties)

Get ZFS properties for a dataset.  The specific properties to return can be
filtered with ?prop1=foo&amp;prop2=bar, etc.


### Inputs

||**Param**||**Type**||**Description**||
||&lt;prop1&gt;||String||Get the property given by the &quot;prop1&quot; value||
||&lt;prop2&gt;||String||Get the property given by the &quot;prop2&quot; value||
||&lt;propN&gt;||String||Get the property given by the &quot;propN&quot; value||


### Responses

||*Code*||*Type*||*Description*||
||200||Array||List of dataset property details||

## DatasetPropertiesSet (POST /servers/:server_uuid/datasets/:dataset/properties)

Set one or more properties for a ZFS dataset.


### Inputs

||**Param**||**Type**||**Description**||
||properties||Object||Object containing string property values||


### Responses

||*Code*||*Type*||*Description*||
||204||None||Properties were set successfully||

## DatasetDestroy (DELETE /servers/:server_uuid/datasets/:dataset)

Destroy a ZFS dataset on a server.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||204||None||Dataset successfully deleted||

## ZpoolList (GET /servers/:server_uuid/zpools)

List the ZFS pools on a server.


### Inputs

_None_


### Responses

||*Code*||*Type*||*Description*||
||200||Array||List of zpool detail objects||



