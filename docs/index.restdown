---
title: CNAPI (Compute Node API) Design
markdown2extras: wiki-tables, code-friendly
---

# Who

Orlando
Josh
Bill

# Overview

CNAPI is the 'Compute Node API' which presents an API that workflow jobs can
use to talk to Compute Nodes (CNs).

# Responsibilities

CNAPI is responsible for Compute Node setup, machine life-cycle operations
(creation, state transitions, destruction, etc.) In general, everything should
talk to CNs through CNAPI.

### Dataset Manager

- listing datasets and snapshots on server
- removing datasets from server
    * provisioner (all tasks)
    * Ur
- keeping compute node data up-to-date in UFDS
    * consume heartbeater messages

- manage CN setup process

### Provisioner

- interfacing with vmadm
- interacting with and querying the compute nodes

# Data

CNAPI manages or uses the following data:

- CN resources
    * zpool avail/used/free
    * provisioning ZFS filesystems/volumes
    * configuring shares on said ZFS filesystems
    * memory avail/used/free
    * sysinfo data (uuid, nics, CPUs, extensions, etc)
    * state (unsetup, setting up, up, down, unknown, etc)
    * network info (nic tags)
    * limits (max mem, max disk)
    * platform: current, target
    * currently existing KVMs/Zones
    * server roles and info
- Config:
    * rabbitmq host / creds
    * ufds host / creds
    * service IP
    * Other requirements
    * must use rabbitmq
    * must support 6.5.latest agents/platform as well as master agents/platform

# Compute Node Properties

Compute Node Properties from MAPI:

belongs_to: :server_role :platform_image
has: n, :zones, n, :vms, n, :storage_devices n, :zfs_storage_pools n, :ips, n, :comments, n, :nics, n, :provisioner_messages, n, :physical_nics, n, :vnics, n, :nic_tags,

    hostname
    server_role_id
    ram_in_megabytes
    target_utilization_in_megabytes
    min_available_rmem
    min_arcsize
    reserved
    setting_up_at
    setup_at
    cpu_cores
    current_status
    public_interface
    private_interface
    vendor_number
    vendor_model
    manufacturer
    operating_system
    is_headnode
    latest_boot_at
    platform_image_id
    target_image_set_at
    swap_in_gigabytes
    boot_args
    vm_capable
    cpu_virtualization
    uuid
    hardware_uuid

# UFDS Schema

Each server in UFDS will be represented by an object with the following
layout:

|| *Property*                      || *Type* ||
|| hostname                        || String ||
|| server_role_id                  || Number? ||
|| ram_in_megabytes                || Number ||
|| target_utilization_in_megabytes || Number ||
|| min_available_rmem              || Number (should be suffixed with _in_$unit?) ||
|| min_arcsize                     || Number (should be suffixed with _in_$unit?)  ||
|| reserved                        || Boolean? ||
|| setting_up_at                   || Date ||
|| setup_at                        || Date ||
|| cpu_cores                       || Number ||
|| current_status                  || String ||
|| public_interface                || String ||
|| private_interface               || String ||
|| vendor_number                   || String? ||
|| vendor_model                    || String ||
|| manufacturer                    || String ||
|| operating_system                || String ||     deprecated?
|| is_headnode                     || Boolean ||
|| latest_boot_at                  || Date ||
|| platform_image_id               || Number? ||
|| target_image_set_at             || Date ||
|| swap_in_gigabytes               || Number ||
|| boot_args                       || String ||
|| vm_capable                      || Boolean ||
|| cpu_virtualization              || Boolean ||
|| uuid                            || String ||
|| hardware_uuid                   || String ||
|| state                           || String ||

CNAPI is responsible for listening for compute node heartbeats and updating
UFDS appropriately.

# Compute Node Endpoints

## Details

    GET /servers/:server_uuid
    GET /datacenters/:datacenter_name/servers/:server_uuid

## Machines

    GET /servers/:server_uuid/machines
    GET /datacenters/:datacenter_name/servers/:server_uuid/machines

    GET /servers/:server_uuid/machines/:machine_uuid
    GET /datacenters/:datacenter_name/servers/:server_uuid/machines/:machine_uuid/load

## ZFS Storage Pools

    GET /servers/:server_uuid/zpools
    GET /datacenters/:datacenter_name/servers/:server_uuid/zpools

    GET /servers/:server_uuid/zpools/:zpool
    GET /datacenters/:datacenter_name/servers/:server_uuid/zpools/:zpool

## ZFS Datasets

    GET /servers/:server_uuid/datasets
    GET /datacenters/:datacenter_name/servers/:server_uuid/datasets

    GET /servers/:server_uuid/datasets/:dataset_uuid
    GET /datacenters/:datacenter_name/servers/:server_uuid/datasets/:dataset_uuid

    GET /servers/:server_uuid/zpools/:zpool/datasets/:dataset
    GET /datacenters/:datacenter_name/servers/:server_uuid/zpools/:zpool/datasets/:dataset

# MAPI Backwards Compatability Layer

*Note*: these endpoints will also be proxied by MAPI at /servers.


