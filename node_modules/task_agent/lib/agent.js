var EventEmitter   = require("events").EventEmitter
  , util           = require('util')
  , amqp           = require('amqp')
  , common         = require('./common')
  , AgentClient    = require('./client')

var Agent = module.exports = function (config) {
  this.config = config || { amqp: {} };
}

util.inherits(Agent, EventEmitter);

Agent.prototype.configureAMQP = common.configureAMQP;

Agent.prototype.connect = function(callback) {
  var self = this;
  self.connection = amqp.createConnection(self.config.amqp);
  self.addListeners(function () {
    callback();
  });
}

Agent.prototype.addListeners = function (callback) {
  var self = this;

  this.connection.addListener('ready', function () {
    console.info("Ready to receive commands");
    self.connected = true;
    self.exchange = self.connection.exchange('amq.topic', { type: 'topic' });

    var nopMsgInterval = setInterval(publishNOP, 30000);

    callback();

    function publishNOP() {
      if (!self.connected) {
        clearInterval(nopMsgInterval);
        return;
      }
      self.exchange.publish(self.resource + '._nop.' + self.uuid, {});
    }
  });

  this.connection.addListener('error', function (e) {
    console.info("There was an AMQP error: " + e.message);
  });

  this.connection.addListener('close', function () {
    self.connected = false;

    if (self.agentClient) {
      self.agentClient.agentHandles = {}
      self.agentClient.taskHandles = {}
      delete self.agentClient;
    }

    if (self.agentHandles) {
      self.agentHandles = {};
    }

    if (self.config.reconnect) {
      console.info('MQ connection severed. Waiting 5 seconds...');
      setTimeout(function () {
        console.info('Connecting...');
        self.connection.reconnect();
      }, 5000);
    }
  });
}

/**
 * Callsback with an agent handle we can use to send commands to other agents.
 */
Agent.prototype.getLocalAgentHandle = function (type, callback) {
  var self = this;

  // Return an existing handle if available.
  if (self.agentHandles && self.agentHandles[type]) {
    return callback(null, self.agentHandles[type]);
  }

  if (!self.agentClient) {
    var config = { timeout: 600000 };
    self.agentClient = new AgentClient(config);
    self.agentClient.useConnection(self.connection, function () {
      setupHandles();
    });
  }
  else {
    setupHandles();
  }

  function setupHandles () {
    self.agentClient.getAgentHandle(type, self.uuid, function (handle) {
      if (!self.agentHandles) self.agentHandles = {};
      self.agentHandles[type] = handle;
      callback(null, handle);
    });
  }
}
